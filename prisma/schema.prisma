// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Binding {
  Unknown
  Paperback
  Hardcover
  Ebook
  Audiobook
}

model Book {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  title         String
  authors       Author[]
  longTitle     String?
  synopsis      String?
  openLibraryId String?   @unique
  goodReadsId   String?   @unique
  hardcoverId   Int?      @unique
  hardcoverSlug   String?
  editions      Edition[]

  queries BookQuery[]
  @@index([title])
}

model Edition {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  book            Book     @relation(references: [id], fields: [bookId])
  bookId          String
  editionName     String?
  isbn13          String   @unique
  publicationDate String?
  publisher       String?
  binding         Binding  @default(Unknown)
  image           Image?   @relation(references: [id], fields: [imageId])
  imageId         String?
  openLibraryId   String?  @unique
  goodReadsId     String?  @unique
  hardcoverId     Int?     @unique

  @@index([bookId])
}

model Author {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  openLibraryId String?  @unique
  goodReadsId   String?  @unique
  hardcoverId   Int?     @unique
  hardcoverSlug   String?

  books Book[]

  @@unique([name])
}

model Image {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  url       String
  width     Int
  height    Int
  editions  Edition[]

  @@unique([url])
}

model BookQuery {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  query     String
  books     Book[]

  @@unique([query])
}
